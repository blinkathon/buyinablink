
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid()) @unique
  walletAddress String?   @unique
  blink        UserBlink?
  username     String? @unique
  blinkCreated Boolean @default(false)
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  accounts      Account[]
  // sessions      Session[]
  products     Product[] 
  order   Order[]
  @@index([walletAddress])
  @@index([username])
}

model Product {
  id          String   @id @default(uuid()) 
  name        String
  title       String
  description String
  label       String
  imageUrl    String
  price       String //price
  stock       String //stock limit
  userId    String   
  user      User   @relation(fields: [userId], references: [walletAddress]) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order     Order[]

  @@index([userId])

}


model Order{
  id    String   @id @default(uuid()) //36 we also any seed more 30
  name  String
  city  String
  state String
  dropOfAddress String
  ZipCode       String
  orderstatus    OrderStatus @default(PROCESSING)
  buyerWallet  String 
  customer        Customer   @relation(fields: [buyerWallet],references: [customerWallet])

  productId  String
  product   Product  @relation(fields: [productId],references: [id])

  userId String
  user   User   @relation(fields: [userId],references: [walletAddress])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserBlink {
  id          String  @id @default(uuid())
  title       String
  icon        String  
  description String
  label String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userWallet  String    @unique
  Customer        User    @relation(fields: [userWallet], references: [walletAddress])

  @@index([userWallet],name:"Customer_wallet_address")
  @@index([id])
}


model Customer{
  id String @id @default(uuid())
  customerWallet String? @unique 
  emailAddress   String  @unique
  name String
  orders  Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@index([customerWallet])
}


// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique @map("session_token")
//   userrId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userrId], references: [id], onDelete: Cascade)
 
//   @@map("sessions")
// }


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String? 
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}



model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Status {
  PENDING
  PAID
  FAILED
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}